

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Nov 15 13:22:28 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    19  0000                     
    20                           ; Version 1.41
    21                           ; Generated 25/01/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F25K22 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     _ANSELA	set	3896
    55  0000                     _ANSELC	set	3898
    56  0000                     _ADRESH	set	4036
    57  0000                     _ADCON2	set	4032
    58  0000                     _ADCON0	set	4034
    59  0000                     _INTCON	set	4082
    60  0000                     _LATA	set	3977
    61  0000                     _TRISA	set	3986
    62  0000                     _LATC	set	3979
    63  0000                     _TRISC	set	3988
    64  0000                     _T0CON	set	4053
    65  0000                     _TMR0H	set	4055
    66  0000                     _TMR0L	set	4054
    67  0000                     _GODONE	set	32273
    68  0000                     _GIE	set	32663
    69  0000                     _TMR0ON	set	32431
    70  0000                     _TMR0IF	set	32658
    71  0000                     _TMR0IE	set	32661
    72                           
    73                           ; #config settings
    74  0000                     
    75                           	psect	cinit
    76  000400                     __pcinit:
    77                           	opt stack 0
    78  000400                     start_initialization:
    79                           	opt stack 0
    80  000400                     __initialization:
    81                           	opt stack 0
    82                           
    83                           ; Clear objects allocated to COMRAM (1 bytes)
    84  000400  6A43               	clrf	__pbssCOMRAM& (0+255),c
    85  000402                     end_of_initialization:
    86                           	opt stack 0
    87  000402                     __end_of__initialization:
    88                           	opt stack 0
    89  000402  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    90  000404  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    91  000406  0100               	movlb	0
    92  000408  EF06  F002         	goto	_main	;jump to C main() function
    93                           
    94                           	psect	bssCOMRAM
    95  000043                     __pbssCOMRAM:
    96                           	opt stack 0
    97  000043                     _i:
    98                           	opt stack 0
    99  000043                     	ds	1
   100                           
   101                           	psect	cstackBANK0
   102  000000                     __pcstackBANK0:
   103                           	opt stack 0
   104  000000                     
   105                           ; 1 bytes @ 0x0
   106                           
   107                           	psect	cstackCOMRAM
   108  000001                     __pcstackCOMRAM:
   109                           	opt stack 0
   110  000001                     ?___lmul:
   111                           	opt stack 0
   112  000001                     ___lmul@multiplier:
   113                           	opt stack 0
   114                           
   115                           ; 4 bytes @ 0x0
   116  000001                     	ds	4
   117  000005                     ___lmul@multiplicand:
   118                           	opt stack 0
   119                           
   120                           ; 4 bytes @ 0x4
   121  000005                     	ds	4
   122  000009                     ___lmul@product:
   123                           	opt stack 0
   124                           
   125                           ; 4 bytes @ 0x8
   126  000009                     	ds	4
   127  00000D                     ?___aldiv:
   128                           	opt stack 0
   129  00000D                     ___aldiv@dividend:
   130                           	opt stack 0
   131                           
   132                           ; 4 bytes @ 0xC
   133  00000D                     	ds	4
   134  000011                     ___aldiv@divisor:
   135                           	opt stack 0
   136                           
   137                           ; 4 bytes @ 0x10
   138  000011                     	ds	4
   139  000015                     ___aldiv@counter:
   140                           	opt stack 0
   141                           
   142                           ; 1 bytes @ 0x14
   143  000015                     	ds	1
   144  000016                     ___aldiv@sign:
   145                           	opt stack 0
   146                           
   147                           ; 1 bytes @ 0x15
   148  000016                     	ds	1
   149  000017                     ___aldiv@quotient:
   150                           	opt stack 0
   151                           
   152                           ; 4 bytes @ 0x16
   153  000017                     	ds	4
   154  00001B                     ?_setPreScaler:
   155                           	opt stack 0
   156  00001B                     setPreScaler@t:
   157                           	opt stack 0
   158                           
   159                           ; 4 bytes @ 0x1A
   160  00001B                     	ds	4
   161  00001F                     ??_setPreScaler:
   162                           
   163                           ; 1 bytes @ 0x1E
   164  00001F                     	ds	5
   165  000024                     setPreScaler@HighBitCounter:
   166                           	opt stack 0
   167                           
   168                           ; 1 bytes @ 0x23
   169  000024                     	ds	1
   170  000025                     setPreScaler@PreScaler:
   171                           	opt stack 0
   172                           
   173                           ; 4 bytes @ 0x24
   174  000025                     	ds	4
   175  000029                     setTMR0_ms@timeval:
   176                           	opt stack 0
   177                           
   178                           ; 4 bytes @ 0x28
   179  000029                     	ds	4
   180  00002D                     setTMR0_ms@PreScaler:
   181                           	opt stack 0
   182                           
   183                           ; 4 bytes @ 0x2C
   184  00002D                     	ds	4
   185  000031                     setTMR0_ms@StartingValue:
   186                           	opt stack 0
   187                           
   188                           ; 4 bytes @ 0x30
   189  000031                     	ds	4
   190  000035                     ??_isr:
   191                           
   192                           ; 1 bytes @ 0x34
   193  000035                     	ds	14
   194                           
   195 ;;
   196 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   197 ;;
   198 ;; *************** function _main *****************
   199 ;; Defined at:
   200 ;;		line 21 in file "main.c"
   201 ;; Parameters:    Size  Location     Type
   202 ;;		None
   203 ;; Auto vars:     Size  Location     Type
   204 ;;		None
   205 ;; Return value:  Size  Location     Type
   206 ;;                  1    wreg      void 
   207 ;; Registers used:
   208 ;;		wreg, status,2, cstack
   209 ;; Tracked objects:
   210 ;;		On entry : 0/0
   211 ;;		On exit  : 0/0
   212 ;;		Unchanged: 0/0
   213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   214 ;;      Params:         0       0       0       0       0       0       0
   215 ;;      Locals:         0       0       0       0       0       0       0
   216 ;;      Temps:          0       0       0       0       0       0       0
   217 ;;      Totals:         0       0       0       0       0       0       0
   218 ;;Total ram usage:        0 bytes
   219 ;; Hardware stack levels required when called:    5
   220 ;; This function calls:
   221 ;;		_Setup
   222 ;; This function is called by:
   223 ;;		Startup code after reset
   224 ;; This function uses a non-reentrant model
   225 ;;
   226                           
   227                           	psect	text0
   228  00040C                     __ptext0:
   229                           	opt stack 0
   230  00040C                     _main:
   231                           	opt stack 26
   232                           
   233                           ;main.c: 22: Setup();
   234                           
   235                           ;incstack = 0
   236  00040C  ECE7  F001         	call	_Setup	;wreg free
   237  000410                     l56:
   238  000410  D7FF               	goto	l56
   239  000412                     __end_of_main:
   240                           	opt stack 0
   241                           
   242 ;; *************** function _Setup *****************
   243 ;; Defined at:
   244 ;;		line 31 in file "main.c"
   245 ;; Parameters:    Size  Location     Type
   246 ;;		None
   247 ;; Auto vars:     Size  Location     Type
   248 ;;		None
   249 ;; Return value:  Size  Location     Type
   250 ;;                  1    wreg      void 
   251 ;; Registers used:
   252 ;;		wreg, status,2
   253 ;; Tracked objects:
   254 ;;		On entry : 0/0
   255 ;;		On exit  : 0/0
   256 ;;		Unchanged: 0/0
   257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   258 ;;      Params:         0       0       0       0       0       0       0
   259 ;;      Locals:         0       0       0       0       0       0       0
   260 ;;      Temps:          0       0       0       0       0       0       0
   261 ;;      Totals:         0       0       0       0       0       0       0
   262 ;;Total ram usage:        0 bytes
   263 ;; Hardware stack levels used:    1
   264 ;; Hardware stack levels required when called:    4
   265 ;; This function calls:
   266 ;;		Nothing
   267 ;; This function is called by:
   268 ;;		_main
   269 ;; This function uses a non-reentrant model
   270 ;;
   271                           
   272                           	psect	text1
   273  0003CE                     __ptext1:
   274                           	opt stack 0
   275  0003CE                     _Setup:
   276                           	opt stack 26
   277                           
   278                           ;main.c: 32: TRISC = 0b00000000;
   279                           
   280                           ;incstack = 0
   281  0003CE  0E00               	movlw	0
   282  0003D0  6E94               	movwf	3988,c	;volatile
   283                           
   284                           ;main.c: 33: ANSELC = 0b00000000;
   285  0003D2  0E00               	movlw	0
   286  0003D4  010F               	movlb	15	; () banked
   287  0003D6  6F3A               	movwf	58,b	;volatile
   288                           
   289                           ;main.c: 34: LATC = 0b00000000;
   290  0003D8  0E00               	movlw	0
   291  0003DA  6E8B               	movwf	3979,c	;volatile
   292                           
   293                           ;main.c: 35: ANSELA = 0b00000101;
   294  0003DC  0E05               	movlw	5
   295  0003DE  010F               	movlb	15	; () banked
   296  0003E0  6F38               	movwf	56,b	;volatile
   297                           
   298                           ;main.c: 36: TRISA = 0b00000001;
   299  0003E2  0E01               	movlw	1
   300  0003E4  6E92               	movwf	3986,c	;volatile
   301                           
   302                           ;main.c: 37: T0CON = 0b10000000;
   303  0003E6  0E80               	movlw	128
   304  0003E8  6ED5               	movwf	4053,c	;volatile
   305                           
   306                           ; BSR set to: 15
   307                           ;main.c: 38: TMR0L = 0b11111111;
   308  0003EA  68D6               	setf	4054,c	;volatile
   309                           
   310                           ; BSR set to: 15
   311                           ;main.c: 39: TMR0H = 0b11111111;
   312  0003EC  68D7               	setf	4055,c	;volatile
   313                           
   314                           ;main.c: 40: LATA = 0b00000000;
   315  0003EE  0E00               	movlw	0
   316  0003F0  6E89               	movwf	3977,c	;volatile
   317                           
   318                           ;main.c: 41: INTCON = 0b11100000;
   319  0003F2  0EE0               	movlw	224
   320  0003F4  6EF2               	movwf	intcon,c	;volatile
   321                           
   322                           ;main.c: 42: ADCON0 = 0b00000001;
   323  0003F6  0E01               	movlw	1
   324  0003F8  6EC2               	movwf	4034,c	;volatile
   325                           
   326                           ;main.c: 43: ADCON2 = 0b00111111;
   327  0003FA  0E3F               	movlw	63
   328  0003FC  6EC0               	movwf	4032,c	;volatile
   329                           
   330                           ; BSR set to: 15
   331  0003FE  0012               	return		;funcret
   332  000400                     __end_of_Setup:
   333                           	opt stack 0
   334                           intcon	equ	0xFF2
   335                           
   336 ;; *************** function _isr *****************
   337 ;; Defined at:
   338 ;;		line 48 in file "main.c"
   339 ;; Parameters:    Size  Location     Type
   340 ;;		None
   341 ;; Auto vars:     Size  Location     Type
   342 ;;		None
   343 ;; Return value:  Size  Location     Type
   344 ;;                  1    wreg      void 
   345 ;; Registers used:
   346 ;;		wreg, status,2, status,0, cstack
   347 ;; Tracked objects:
   348 ;;		On entry : 0/0
   349 ;;		On exit  : 0/0
   350 ;;		Unchanged: 0/0
   351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   352 ;;      Params:         0       0       0       0       0       0       0
   353 ;;      Locals:         0       0       0       0       0       0       0
   354 ;;      Temps:         14       0       0       0       0       0       0
   355 ;;      Totals:        14       0       0       0       0       0       0
   356 ;;Total ram usage:       14 bytes
   357 ;; Hardware stack levels used:    1
   358 ;; Hardware stack levels required when called:    3
   359 ;; This function calls:
   360 ;;		_setTMR0_ms
   361 ;; This function is called by:
   362 ;;		Interrupt level 2
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366                           	psect	intcode
   367  000008                     __pintcode:
   368                           	opt stack 0
   369  000008                     _isr:
   370                           	opt stack 26
   371                           
   372                           ; BSR set to: 15
   373                           ;incstack = 0
   374  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   375  00000A  CFFA F035          	movff	pclath,??_isr
   376  00000E  CFFB F036          	movff	pclatu,??_isr+1
   377  000012  CFE9 F037          	movff	fsr0l,??_isr+2
   378  000016  CFEA F038          	movff	fsr0h,??_isr+3
   379  00001A  CFE1 F039          	movff	fsr1l,??_isr+4
   380  00001E  CFE2 F03A          	movff	fsr1h,??_isr+5
   381  000022  CFD9 F03B          	movff	fsr2l,??_isr+6
   382  000026  CFDA F03C          	movff	fsr2h,??_isr+7
   383  00002A  CFF3 F03D          	movff	prodl,??_isr+8
   384  00002E  CFF4 F03E          	movff	prodh,??_isr+9
   385  000032  CFF6 F03F          	movff	tblptrl,??_isr+10
   386  000036  CFF7 F040          	movff	tblptrh,??_isr+11
   387  00003A  CFF8 F041          	movff	tblptru,??_isr+12
   388  00003E  CFF5 F042          	movff	tablat,??_isr+13
   389                           
   390                           ;main.c: 50: if(TMR0IE && TMR0IF){
   391  000042  BAF2               	btfsc	intcon,5,c	;volatile
   392  000044  A4F2               	btfss	intcon,2,c	;volatile
   393  000046  D014               	goto	i2l67
   394                           
   395                           ;main.c: 53: TMR0ON = 0;
   396  000048  9ED5               	bcf	4053,7,c	;volatile
   397                           
   398                           ;main.c: 54: TMR0IF=0;
   399  00004A  94F2               	bcf	intcon,2,c	;volatile
   400                           
   401                           ;main.c: 55: GIE=0;
   402  00004C  9EF2               	bcf	intcon,7,c	;volatile
   403                           
   404                           ;main.c: 58: setTMR0_ms(20);
   405  00004E  0E14               	movlw	20
   406  000050  6E29               	movwf	setTMR0_ms@timeval,c
   407  000052  0E00               	movlw	0
   408  000054  6E2A               	movwf	setTMR0_ms@timeval+1,c
   409  000056  0E00               	movlw	0
   410  000058  6E2B               	movwf	setTMR0_ms@timeval+2,c
   411  00005A  0E00               	movlw	0
   412  00005C  6E2C               	movwf	setTMR0_ms@timeval+3,c
   413  00005E  ECE4  F000         	call	_setTMR0_ms	;wreg free
   414                           
   415                           ;main.c: 61: if (GODONE == 0){
   416  000062  B2C2               	btfsc	4034,1,c	;volatile
   417  000064  D003               	goto	i2l66
   418                           
   419                           ;main.c: 62: LATC = ADRESH;
   420  000066  CFC4 FF8B          	movff	4036,3979	;volatile
   421                           
   422                           ;main.c: 63: GODONE = 1;
   423  00006A  82C2               	bsf	4034,1,c	;volatile
   424  00006C                     i2l66:
   425                           
   426                           ;main.c: 64: }
   427                           ;main.c: 67: GIE=1;
   428  00006C  8EF2               	bsf	intcon,7,c	;volatile
   429                           
   430                           ;main.c: 68: TMR0ON=1;
   431  00006E  8ED5               	bsf	4053,7,c	;volatile
   432  000070                     i2l67:
   433  000070  C042  FFF5         	movff	??_isr+13,tablat
   434  000074  C041  FFF8         	movff	??_isr+12,tblptru
   435  000078  C040  FFF7         	movff	??_isr+11,tblptrh
   436  00007C  C03F  FFF6         	movff	??_isr+10,tblptrl
   437  000080  C03E  FFF4         	movff	??_isr+9,prodh
   438  000084  C03D  FFF3         	movff	??_isr+8,prodl
   439  000088  C03C  FFDA         	movff	??_isr+7,fsr2h
   440  00008C  C03B  FFD9         	movff	??_isr+6,fsr2l
   441  000090  C03A  FFE2         	movff	??_isr+5,fsr1h
   442  000094  C039  FFE1         	movff	??_isr+4,fsr1l
   443  000098  C038  FFEA         	movff	??_isr+3,fsr0h
   444  00009C  C037  FFE9         	movff	??_isr+2,fsr0l
   445  0000A0  C036  FFFB         	movff	??_isr+1,pclatu
   446  0000A4  C035  FFFA         	movff	??_isr,pclath
   447  0000A8  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   448  0000AA  0011               	retfie		f
   449  0000AC                     __end_of_isr:
   450                           	opt stack 0
   451                           pclatu	equ	0xFFB
   452                           pclath	equ	0xFFA
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           prodh	equ	0xFF4
   458                           prodl	equ	0xFF3
   459                           intcon	equ	0xFF2
   460                           fsr0h	equ	0xFEA
   461                           fsr0l	equ	0xFE9
   462                           fsr1h	equ	0xFE2
   463                           fsr1l	equ	0xFE1
   464                           fsr2h	equ	0xFDA
   465                           fsr2l	equ	0xFD9
   466                           
   467 ;; *************** function _setTMR0_ms *****************
   468 ;; Defined at:
   469 ;;		line 19 in file "setTMR0.h"
   470 ;; Parameters:    Size  Location     Type
   471 ;;  timeval         4   40[COMRAM] long 
   472 ;; Auto vars:     Size  Location     Type
   473 ;;  StartingValu    4   48[COMRAM] long 
   474 ;;  PreScaler       4   44[COMRAM] long 
   475 ;; Return value:  Size  Location     Type
   476 ;;                  1    wreg      void 
   477 ;; Registers used:
   478 ;;		wreg, status,2, status,0, cstack
   479 ;; Tracked objects:
   480 ;;		On entry : 0/0
   481 ;;		On exit  : 0/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   484 ;;      Params:         4       0       0       0       0       0       0
   485 ;;      Locals:         8       0       0       0       0       0       0
   486 ;;      Temps:          0       0       0       0       0       0       0
   487 ;;      Totals:        12       0       0       0       0       0       0
   488 ;;Total ram usage:       12 bytes
   489 ;; Hardware stack levels used:    1
   490 ;; Hardware stack levels required when called:    2
   491 ;; This function calls:
   492 ;;		___aldiv
   493 ;;		___lmul
   494 ;;		_setPreScaler
   495 ;; This function is called by:
   496 ;;		_isr
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           	psect	text3
   501  0001C8                     __ptext3:
   502                           	opt stack 0
   503  0001C8                     _setTMR0_ms:
   504                           	opt stack 26
   505                           
   506                           ;setTMR0.h: 20: long PreScaler = 0 , StartingValue = 0;
   507                           
   508                           ;incstack = 0
   509  0001C8  0E00               	movlw	0
   510  0001CA  6E2D               	movwf	setTMR0_ms@PreScaler,c
   511  0001CC  0E00               	movlw	0
   512  0001CE  6E2E               	movwf	setTMR0_ms@PreScaler+1,c
   513  0001D0  0E00               	movlw	0
   514  0001D2  6E2F               	movwf	setTMR0_ms@PreScaler+2,c
   515  0001D4  0E00               	movlw	0
   516  0001D6  6E30               	movwf	setTMR0_ms@PreScaler+3,c
   517  0001D8  0E00               	movlw	0
   518  0001DA  6E31               	movwf	setTMR0_ms@StartingValue,c
   519  0001DC  0E00               	movlw	0
   520  0001DE  6E32               	movwf	setTMR0_ms@StartingValue+1,c
   521  0001E0  0E00               	movlw	0
   522  0001E2  6E33               	movwf	setTMR0_ms@StartingValue+2,c
   523  0001E4  0E00               	movlw	0
   524  0001E6  6E34               	movwf	setTMR0_ms@StartingValue+3,c
   525                           
   526                           ;setTMR0.h: 23: PreScaler = setPreScaler(timeval);
   527  0001E8  C029  F01B         	movff	setTMR0_ms@timeval,setPreScaler@t
   528  0001EC  C02A  F01C         	movff	setTMR0_ms@timeval+1,setPreScaler@t+1
   529  0001F0  C02B  F01D         	movff	setTMR0_ms@timeval+2,setPreScaler@t+2
   530  0001F4  C02C  F01E         	movff	setTMR0_ms@timeval+3,setPreScaler@t+3
   531  0001F8  EC58  F000         	call	_setPreScaler	;wreg free
   532  0001FC  C01B  F02D         	movff	?_setPreScaler,setTMR0_ms@PreScaler
   533  000200  C01C  F02E         	movff	?_setPreScaler+1,setTMR0_ms@PreScaler+1
   534  000204  C01D  F02F         	movff	?_setPreScaler+2,setTMR0_ms@PreScaler+2
   535  000208  C01E  F030         	movff	?_setPreScaler+3,setTMR0_ms@PreScaler+3
   536                           
   537                           ;setTMR0.h: 26: StartingValue = 0x10000 - timeval * 2765 / PreScaler;
   538  00020C  C029  F001         	movff	setTMR0_ms@timeval,___lmul@multiplier
   539  000210  C02A  F002         	movff	setTMR0_ms@timeval+1,___lmul@multiplier+1
   540  000214  C02B  F003         	movff	setTMR0_ms@timeval+2,___lmul@multiplier+2
   541  000218  C02C  F004         	movff	setTMR0_ms@timeval+3,___lmul@multiplier+3
   542  00021C  0ECD               	movlw	205
   543  00021E  6E05               	movwf	___lmul@multiplicand,c
   544  000220  0E0A               	movlw	10
   545  000222  6E06               	movwf	___lmul@multiplicand+1,c
   546  000224  0E00               	movlw	0
   547  000226  6E07               	movwf	___lmul@multiplicand+2,c
   548  000228  0E00               	movlw	0
   549  00022A  6E08               	movwf	___lmul@multiplicand+3,c
   550  00022C  ECBC  F001         	call	___lmul	;wreg free
   551  000230  C001  F00D         	movff	?___lmul,___aldiv@dividend
   552  000234  C002  F00E         	movff	?___lmul+1,___aldiv@dividend+1
   553  000238  C003  F00F         	movff	?___lmul+2,___aldiv@dividend+2
   554  00023C  C004  F010         	movff	?___lmul+3,___aldiv@dividend+3
   555  000240  C02D  F011         	movff	setTMR0_ms@PreScaler,___aldiv@divisor
   556  000244  C02E  F012         	movff	setTMR0_ms@PreScaler+1,___aldiv@divisor+1
   557  000248  C02F  F013         	movff	setTMR0_ms@PreScaler+2,___aldiv@divisor+2
   558  00024C  C030  F014         	movff	setTMR0_ms@PreScaler+3,___aldiv@divisor+3
   559  000250  EC56  F001         	call	___aldiv	;wreg free
   560  000254  1E0D               	comf	?___aldiv,f,c
   561  000256  1E0E               	comf	?___aldiv+1,f,c
   562  000258  1E0F               	comf	?___aldiv+2,f,c
   563  00025A  1E10               	comf	?___aldiv+3,f,c
   564  00025C  2A0D               	incf	?___aldiv,f,c
   565  00025E  0E00               	movlw	0
   566  000260  220E               	addwfc	?___aldiv+1,f,c
   567  000262  220F               	addwfc	?___aldiv+2,f,c
   568  000264  2210               	addwfc	?___aldiv+3,f,c
   569  000266  0E00               	movlw	0
   570  000268  240D               	addwf	?___aldiv,w,c
   571  00026A  6E31               	movwf	setTMR0_ms@StartingValue,c
   572  00026C  0E00               	movlw	0
   573  00026E  200E               	addwfc	?___aldiv+1,w,c
   574  000270  6E32               	movwf	setTMR0_ms@StartingValue+1,c
   575  000272  0E01               	movlw	1
   576  000274  200F               	addwfc	?___aldiv+2,w,c
   577  000276  6E33               	movwf	setTMR0_ms@StartingValue+2,c
   578  000278  0E00               	movlw	0
   579  00027A  2010               	addwfc	?___aldiv+3,w,c
   580  00027C  6E34               	movwf	setTMR0_ms@StartingValue+3,c
   581                           
   582                           ;setTMR0.h: 27: TMR0L = StartingValue % 256;
   583  00027E  C031  FFD6         	movff	setTMR0_ms@StartingValue,4054	;volatile
   584                           
   585                           ;setTMR0.h: 28: TMR0H = StartingValue / 256;
   586  000282  C031  F00D         	movff	setTMR0_ms@StartingValue,___aldiv@dividend
   587  000286  C032  F00E         	movff	setTMR0_ms@StartingValue+1,___aldiv@dividend+1
   588  00028A  C033  F00F         	movff	setTMR0_ms@StartingValue+2,___aldiv@dividend+2
   589  00028E  C034  F010         	movff	setTMR0_ms@StartingValue+3,___aldiv@dividend+3
   590  000292  0E00               	movlw	0
   591  000294  6E11               	movwf	___aldiv@divisor,c
   592  000296  0E01               	movlw	1
   593  000298  6E12               	movwf	___aldiv@divisor+1,c
   594  00029A  0E00               	movlw	0
   595  00029C  6E13               	movwf	___aldiv@divisor+2,c
   596  00029E  0E00               	movlw	0
   597  0002A0  6E14               	movwf	___aldiv@divisor+3,c
   598  0002A2  EC56  F001         	call	___aldiv	;wreg free
   599  0002A6  500D               	movf	?___aldiv,w,c
   600  0002A8  6ED7               	movwf	4055,c	;volatile
   601  0002AA  0012               	return		;funcret
   602  0002AC                     __end_of_setTMR0_ms:
   603                           	opt stack 0
   604                           pclatu	equ	0xFFB
   605                           pclath	equ	0xFFA
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           prodh	equ	0xFF4
   611                           prodl	equ	0xFF3
   612                           intcon	equ	0xFF2
   613                           fsr0h	equ	0xFEA
   614                           fsr0l	equ	0xFE9
   615                           fsr1h	equ	0xFE2
   616                           fsr1l	equ	0xFE1
   617                           fsr2h	equ	0xFDA
   618                           fsr2l	equ	0xFD9
   619                           
   620 ;; *************** function _setPreScaler *****************
   621 ;; Defined at:
   622 ;;		line 31 in file "setTMR0.h"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  t               4   26[COMRAM] long 
   625 ;; Auto vars:     Size  Location     Type
   626 ;;  PreScaler       4   36[COMRAM] long 
   627 ;;  HighBitCount    1   35[COMRAM] unsigned char 
   628 ;; Return value:  Size  Location     Type
   629 ;;                  4   26[COMRAM] long 
   630 ;; Registers used:
   631 ;;		wreg, status,2, status,0, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   637 ;;      Params:         4       0       0       0       0       0       0
   638 ;;      Locals:         5       0       0       0       0       0       0
   639 ;;      Temps:          5       0       0       0       0       0       0
   640 ;;      Totals:        14       0       0       0       0       0       0
   641 ;;Total ram usage:       14 bytes
   642 ;; Hardware stack levels used:    1
   643 ;; Hardware stack levels required when called:    1
   644 ;; This function calls:
   645 ;;		___aldiv
   646 ;;		___lmul
   647 ;; This function is called by:
   648 ;;		_setTMR0_ms
   649 ;; This function uses a non-reentrant model
   650 ;;
   651                           
   652                           	psect	text4
   653  0000B0                     __ptext4:
   654                           	opt stack 0
   655  0000B0                     _setPreScaler:
   656                           	opt stack 26
   657                           
   658                           ;setTMR0.h: 32: long PreScaler = 0;
   659                           
   660                           ;incstack = 0
   661  0000B0  0E00               	movlw	0
   662  0000B2  6E25               	movwf	setPreScaler@PreScaler,c
   663  0000B4  0E00               	movlw	0
   664  0000B6  6E26               	movwf	setPreScaler@PreScaler+1,c
   665  0000B8  0E00               	movlw	0
   666  0000BA  6E27               	movwf	setPreScaler@PreScaler+2,c
   667  0000BC  0E00               	movlw	0
   668  0000BE  6E28               	movwf	setPreScaler@PreScaler+3,c
   669                           
   670                           ;setTMR0.h: 33: char HighBitCounter = 0;
   671  0000C0  0E00               	movlw	0
   672  0000C2  6E24               	movwf	setPreScaler@HighBitCounter,c
   673                           
   674                           ;setTMR0.h: 36: PreScaler = (t * 2765) / 0x10000;
   675  0000C4  C01B  F001         	movff	setPreScaler@t,___lmul@multiplier
   676  0000C8  C01C  F002         	movff	setPreScaler@t+1,___lmul@multiplier+1
   677  0000CC  C01D  F003         	movff	setPreScaler@t+2,___lmul@multiplier+2
   678  0000D0  C01E  F004         	movff	setPreScaler@t+3,___lmul@multiplier+3
   679  0000D4  0ECD               	movlw	205
   680  0000D6  6E05               	movwf	___lmul@multiplicand,c
   681  0000D8  0E0A               	movlw	10
   682  0000DA  6E06               	movwf	___lmul@multiplicand+1,c
   683  0000DC  0E00               	movlw	0
   684  0000DE  6E07               	movwf	___lmul@multiplicand+2,c
   685  0000E0  0E00               	movlw	0
   686  0000E2  6E08               	movwf	___lmul@multiplicand+3,c
   687  0000E4  ECBC  F001         	call	___lmul	;wreg free
   688  0000E8  C001  F00D         	movff	?___lmul,___aldiv@dividend
   689  0000EC  C002  F00E         	movff	?___lmul+1,___aldiv@dividend+1
   690  0000F0  C003  F00F         	movff	?___lmul+2,___aldiv@dividend+2
   691  0000F4  C004  F010         	movff	?___lmul+3,___aldiv@dividend+3
   692  0000F8  0E00               	movlw	0
   693  0000FA  6E11               	movwf	___aldiv@divisor,c
   694  0000FC  0E00               	movlw	0
   695  0000FE  6E12               	movwf	___aldiv@divisor+1,c
   696  000100  0E01               	movlw	1
   697  000102  6E13               	movwf	___aldiv@divisor+2,c
   698  000104  0E00               	movlw	0
   699  000106  6E14               	movwf	___aldiv@divisor+3,c
   700  000108  EC56  F001         	call	___aldiv	;wreg free
   701  00010C  C00D  F025         	movff	?___aldiv,setPreScaler@PreScaler
   702  000110  C00E  F026         	movff	?___aldiv+1,setPreScaler@PreScaler+1
   703  000114  C00F  F027         	movff	?___aldiv+2,setPreScaler@PreScaler+2
   704  000118  C010  F028         	movff	?___aldiv+3,setPreScaler@PreScaler+3
   705                           
   706                           ;setTMR0.h: 39: while(PreScaler > 1){
   707  00011C  D016               	goto	i2l831
   708  00011E                     i2l827:
   709                           
   710                           ;setTMR0.h: 40: HighBitCounter++;
   711  00011E  2A24               	incf	setPreScaler@HighBitCounter,f,c
   712                           
   713                           ;setTMR0.h: 41: PreScaler = PreScaler >> 1;
   714  000120  C025  F01F         	movff	setPreScaler@PreScaler,??_setPreScaler
   715  000124  C026  F020         	movff	setPreScaler@PreScaler+1,??_setPreScaler+1
   716  000128  C027  F021         	movff	setPreScaler@PreScaler+2,??_setPreScaler+2
   717  00012C  C028  F022         	movff	setPreScaler@PreScaler+3,??_setPreScaler+3
   718  000130  3422               	rlcf	??_setPreScaler+3,w,c
   719  000132  3222               	rrcf	??_setPreScaler+3,f,c
   720  000134  3221               	rrcf	??_setPreScaler+2,f,c
   721  000136  3220               	rrcf	??_setPreScaler+1,f,c
   722  000138  321F               	rrcf	??_setPreScaler,f,c
   723  00013A  C01F  F025         	movff	??_setPreScaler,setPreScaler@PreScaler
   724  00013E  C020  F026         	movff	??_setPreScaler+1,setPreScaler@PreScaler+1
   725  000142  C021  F027         	movff	??_setPreScaler+2,setPreScaler@PreScaler+2
   726  000146  C022  F028         	movff	??_setPreScaler+3,setPreScaler@PreScaler+3
   727  00014A                     i2l831:
   728  00014A  BE28               	btfsc	setPreScaler@PreScaler+3,7,c
   729  00014C  D008               	goto	i2l833
   730  00014E  5028               	movf	setPreScaler@PreScaler+3,w,c
   731  000150  1027               	iorwf	setPreScaler@PreScaler+2,w,c
   732  000152  1026               	iorwf	setPreScaler@PreScaler+1,w,c
   733  000154  E1E4               	bnz	i2l827
   734  000156  0E02               	movlw	2
   735  000158  5C25               	subwf	setPreScaler@PreScaler,w,c
   736  00015A  B0D8               	btfsc	status,0,c
   737  00015C  D7E0               	goto	i2l827
   738  00015E                     i2l833:
   739                           
   740                           ;setTMR0.h: 42: }
   741                           ;setTMR0.h: 43: PreScaler = PreScaler << (HighBitCounter + 1);
   742  00015E  C024  F01F         	movff	setPreScaler@HighBitCounter,??_setPreScaler
   743  000162  0E01               	movlw	1
   744  000164  261F               	addwf	??_setPreScaler,f,c
   745  000166  C025  F020         	movff	setPreScaler@PreScaler,??_setPreScaler+1
   746  00016A  C026  F021         	movff	setPreScaler@PreScaler+1,??_setPreScaler+2
   747  00016E  C027  F022         	movff	setPreScaler@PreScaler+2,??_setPreScaler+3
   748  000172  C028  F023         	movff	setPreScaler@PreScaler+3,??_setPreScaler+4
   749  000176  2A1F               	incf	??_setPreScaler,f,c
   750  000178  D005               	goto	i2u24_40
   751  00017A                     i2u24_45:
   752  00017A  90D8               	bcf	status,0,c
   753  00017C  3620               	rlcf	??_setPreScaler+1,f,c
   754  00017E  3621               	rlcf	??_setPreScaler+2,f,c
   755  000180  3622               	rlcf	??_setPreScaler+3,f,c
   756  000182  3623               	rlcf	??_setPreScaler+4,f,c
   757  000184                     i2u24_40:
   758  000184  2E1F               	decfsz	??_setPreScaler,f,c
   759  000186  D7F9               	goto	i2u24_45
   760  000188  C020  F025         	movff	??_setPreScaler+1,setPreScaler@PreScaler
   761  00018C  C021  F026         	movff	??_setPreScaler+2,setPreScaler@PreScaler+1
   762  000190  C022  F027         	movff	??_setPreScaler+3,setPreScaler@PreScaler+2
   763  000194  C023  F028         	movff	??_setPreScaler+4,setPreScaler@PreScaler+3
   764                           
   765                           ;setTMR0.h: 46: if(PreScaler > 1){
   766  000198  BE28               	btfsc	setPreScaler@PreScaler+3,7,c
   767  00019A  D00B               	goto	i2l837
   768  00019C  5028               	movf	setPreScaler@PreScaler+3,w,c
   769  00019E  1027               	iorwf	setPreScaler@PreScaler+2,w,c
   770  0001A0  1026               	iorwf	setPreScaler@PreScaler+1,w,c
   771  0001A2  E104               	bnz	i2u25_40
   772  0001A4  0E02               	movlw	2
   773  0001A6  5C25               	subwf	setPreScaler@PreScaler,w,c
   774  0001A8  A0D8               	btfss	status,0,c
   775  0001AA  D003               	goto	i2l837
   776  0001AC                     i2u25_40:
   777                           
   778                           ;setTMR0.h: 47: T0CON = HighBitCounter;
   779  0001AC  C024  FFD5         	movff	setPreScaler@HighBitCounter,4053	;volatile
   780                           
   781                           ;setTMR0.h: 48: }else{
   782  0001B0  D002               	goto	i2l839
   783  0001B2                     i2l837:
   784                           
   785                           ;setTMR0.h: 49: T0CON = 0b00001000;
   786  0001B2  0E08               	movlw	8
   787  0001B4  6ED5               	movwf	4053,c	;volatile
   788  0001B6                     i2l839:
   789                           
   790                           ;setTMR0.h: 50: }
   791                           ;setTMR0.h: 51: return(PreScaler);
   792  0001B6  C025  F01B         	movff	setPreScaler@PreScaler,?_setPreScaler
   793  0001BA  C026  F01C         	movff	setPreScaler@PreScaler+1,?_setPreScaler+1
   794  0001BE  C027  F01D         	movff	setPreScaler@PreScaler+2,?_setPreScaler+2
   795  0001C2  C028  F01E         	movff	setPreScaler@PreScaler+3,?_setPreScaler+3
   796  0001C6  0012               	return	
   797  0001C8                     __end_of_setPreScaler:
   798                           	opt stack 0
   799                           pclatu	equ	0xFFB
   800                           pclath	equ	0xFFA
   801                           tblptru	equ	0xFF8
   802                           tblptrh	equ	0xFF7
   803                           tblptrl	equ	0xFF6
   804                           tablat	equ	0xFF5
   805                           prodh	equ	0xFF4
   806                           prodl	equ	0xFF3
   807                           intcon	equ	0xFF2
   808                           fsr0h	equ	0xFEA
   809                           fsr0l	equ	0xFE9
   810                           fsr1h	equ	0xFE2
   811                           fsr1l	equ	0xFE1
   812                           fsr2h	equ	0xFDA
   813                           fsr2l	equ	0xFD9
   814                           status	equ	0xFD8
   815                           
   816 ;; *************** function ___lmul *****************
   817 ;; Defined at:
   818 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;  multiplier      4    0[COMRAM] unsigned long 
   821 ;;  multiplicand    4    4[COMRAM] unsigned long 
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  product         4    8[COMRAM] unsigned long 
   824 ;; Return value:  Size  Location     Type
   825 ;;                  4    0[COMRAM] unsigned long 
   826 ;; Registers used:
   827 ;;		wreg, status,2, status,0
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   833 ;;      Params:         8       0       0       0       0       0       0
   834 ;;      Locals:         4       0       0       0       0       0       0
   835 ;;      Temps:          0       0       0       0       0       0       0
   836 ;;      Totals:        12       0       0       0       0       0       0
   837 ;;Total ram usage:       12 bytes
   838 ;; Hardware stack levels used:    1
   839 ;; This function calls:
   840 ;;		Nothing
   841 ;; This function is called by:
   842 ;;		_setTMR0_ms
   843 ;;		_setPreScaler
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847                           	psect	text5
   848  000378                     __ptext5:
   849                           	opt stack 0
   850  000378                     ___lmul:
   851                           	opt stack 26
   852                           
   853                           ;incstack = 0
   854  000378  0E00               	movlw	0
   855  00037A  6E09               	movwf	___lmul@product,c
   856  00037C  0E00               	movlw	0
   857  00037E  6E0A               	movwf	___lmul@product+1,c
   858  000380  0E00               	movlw	0
   859  000382  6E0B               	movwf	___lmul@product+2,c
   860  000384  0E00               	movlw	0
   861  000386  6E0C               	movwf	___lmul@product+3,c
   862  000388                     i2l771:
   863  000388  A001               	btfss	___lmul@multiplier,0,c
   864  00038A  D008               	goto	i2l775
   865  00038C  5005               	movf	___lmul@multiplicand,w,c
   866  00038E  2609               	addwf	___lmul@product,f,c
   867  000390  5006               	movf	___lmul@multiplicand+1,w,c
   868  000392  220A               	addwfc	___lmul@product+1,f,c
   869  000394  5007               	movf	___lmul@multiplicand+2,w,c
   870  000396  220B               	addwfc	___lmul@product+2,f,c
   871  000398  5008               	movf	___lmul@multiplicand+3,w,c
   872  00039A  220C               	addwfc	___lmul@product+3,f,c
   873  00039C                     i2l775:
   874  00039C  90D8               	bcf	status,0,c
   875  00039E  3605               	rlcf	___lmul@multiplicand,f,c
   876  0003A0  3606               	rlcf	___lmul@multiplicand+1,f,c
   877  0003A2  3607               	rlcf	___lmul@multiplicand+2,f,c
   878  0003A4  3608               	rlcf	___lmul@multiplicand+3,f,c
   879  0003A6  90D8               	bcf	status,0,c
   880  0003A8  3204               	rrcf	___lmul@multiplier+3,f,c
   881  0003AA  3203               	rrcf	___lmul@multiplier+2,f,c
   882  0003AC  3202               	rrcf	___lmul@multiplier+1,f,c
   883  0003AE  3201               	rrcf	___lmul@multiplier,f,c
   884  0003B0  5001               	movf	___lmul@multiplier,w,c
   885  0003B2  1002               	iorwf	___lmul@multiplier+1,w,c
   886  0003B4  1003               	iorwf	___lmul@multiplier+2,w,c
   887  0003B6  1004               	iorwf	___lmul@multiplier+3,w,c
   888  0003B8  A4D8               	btfss	status,2,c
   889  0003BA  D7E6               	goto	i2l771
   890  0003BC  C009  F001         	movff	___lmul@product,?___lmul
   891  0003C0  C00A  F002         	movff	___lmul@product+1,?___lmul+1
   892  0003C4  C00B  F003         	movff	___lmul@product+2,?___lmul+2
   893  0003C8  C00C  F004         	movff	___lmul@product+3,?___lmul+3
   894  0003CC  0012               	return		;funcret
   895  0003CE                     __end_of___lmul:
   896                           	opt stack 0
   897                           pclatu	equ	0xFFB
   898                           pclath	equ	0xFFA
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           prodh	equ	0xFF4
   904                           prodl	equ	0xFF3
   905                           intcon	equ	0xFF2
   906                           fsr0h	equ	0xFEA
   907                           fsr0l	equ	0xFE9
   908                           fsr1h	equ	0xFE2
   909                           fsr1l	equ	0xFE1
   910                           fsr2h	equ	0xFDA
   911                           fsr2l	equ	0xFD9
   912                           status	equ	0xFD8
   913                           
   914 ;; *************** function ___aldiv *****************
   915 ;; Defined at:
   916 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;  dividend        4   12[COMRAM] long 
   919 ;;  divisor         4   16[COMRAM] long 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  quotient        4   22[COMRAM] long 
   922 ;;  sign            1   21[COMRAM] unsigned char 
   923 ;;  counter         1   20[COMRAM] unsigned char 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  4   12[COMRAM] long 
   926 ;; Registers used:
   927 ;;		wreg, status,2, status,0
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   933 ;;      Params:         8       0       0       0       0       0       0
   934 ;;      Locals:         6       0       0       0       0       0       0
   935 ;;      Temps:          0       0       0       0       0       0       0
   936 ;;      Totals:        14       0       0       0       0       0       0
   937 ;;Total ram usage:       14 bytes
   938 ;; Hardware stack levels used:    1
   939 ;; This function calls:
   940 ;;		Nothing
   941 ;; This function is called by:
   942 ;;		_setTMR0_ms
   943 ;;		_setPreScaler
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text6
   948  0002AC                     __ptext6:
   949                           	opt stack 0
   950  0002AC                     ___aldiv:
   951                           	opt stack 26
   952                           
   953                           ;incstack = 0
   954  0002AC  0E00               	movlw	0
   955  0002AE  6E16               	movwf	___aldiv@sign,c
   956  0002B0  AE14               	btfss	___aldiv@divisor+3,7,c
   957  0002B2  D00A               	goto	i2l787
   958  0002B4  1E14               	comf	___aldiv@divisor+3,f,c
   959  0002B6  1E13               	comf	___aldiv@divisor+2,f,c
   960  0002B8  1E12               	comf	___aldiv@divisor+1,f,c
   961  0002BA  6C11               	negf	___aldiv@divisor,c
   962  0002BC  0E00               	movlw	0
   963  0002BE  2212               	addwfc	___aldiv@divisor+1,f,c
   964  0002C0  2213               	addwfc	___aldiv@divisor+2,f,c
   965  0002C2  2214               	addwfc	___aldiv@divisor+3,f,c
   966  0002C4  0E01               	movlw	1
   967  0002C6  6E16               	movwf	___aldiv@sign,c
   968  0002C8                     i2l787:
   969  0002C8  AE10               	btfss	___aldiv@dividend+3,7,c
   970  0002CA  D00A               	goto	i2l793
   971  0002CC  1E10               	comf	___aldiv@dividend+3,f,c
   972  0002CE  1E0F               	comf	___aldiv@dividend+2,f,c
   973  0002D0  1E0E               	comf	___aldiv@dividend+1,f,c
   974  0002D2  6C0D               	negf	___aldiv@dividend,c
   975  0002D4  0E00               	movlw	0
   976  0002D6  220E               	addwfc	___aldiv@dividend+1,f,c
   977  0002D8  220F               	addwfc	___aldiv@dividend+2,f,c
   978  0002DA  2210               	addwfc	___aldiv@dividend+3,f,c
   979  0002DC  0E01               	movlw	1
   980  0002DE  1A16               	xorwf	___aldiv@sign,f,c
   981  0002E0                     i2l793:
   982  0002E0  0E00               	movlw	0
   983  0002E2  6E17               	movwf	___aldiv@quotient,c
   984  0002E4  0E00               	movlw	0
   985  0002E6  6E18               	movwf	___aldiv@quotient+1,c
   986  0002E8  0E00               	movlw	0
   987  0002EA  6E19               	movwf	___aldiv@quotient+2,c
   988  0002EC  0E00               	movlw	0
   989  0002EE  6E1A               	movwf	___aldiv@quotient+3,c
   990  0002F0  5011               	movf	___aldiv@divisor,w,c
   991  0002F2  1012               	iorwf	___aldiv@divisor+1,w,c
   992  0002F4  1013               	iorwf	___aldiv@divisor+2,w,c
   993  0002F6  1014               	iorwf	___aldiv@divisor+3,w,c
   994  0002F8  B4D8               	btfsc	status,2,c
   995  0002FA  D02A               	goto	i2l815
   996  0002FC  0E01               	movlw	1
   997  0002FE  6E15               	movwf	___aldiv@counter,c
   998  000300  D006               	goto	i2l801
   999  000302                     i2l799:
  1000  000302  90D8               	bcf	status,0,c
  1001  000304  3611               	rlcf	___aldiv@divisor,f,c
  1002  000306  3612               	rlcf	___aldiv@divisor+1,f,c
  1003  000308  3613               	rlcf	___aldiv@divisor+2,f,c
  1004  00030A  3614               	rlcf	___aldiv@divisor+3,f,c
  1005  00030C  2A15               	incf	___aldiv@counter,f,c
  1006  00030E                     i2l801:
  1007  00030E  AE14               	btfss	___aldiv@divisor+3,7,c
  1008  000310  D7F8               	goto	i2l799
  1009  000312                     i2l803:
  1010  000312  90D8               	bcf	status,0,c
  1011  000314  3617               	rlcf	___aldiv@quotient,f,c
  1012  000316  3618               	rlcf	___aldiv@quotient+1,f,c
  1013  000318  3619               	rlcf	___aldiv@quotient+2,f,c
  1014  00031A  361A               	rlcf	___aldiv@quotient+3,f,c
  1015  00031C  5011               	movf	___aldiv@divisor,w,c
  1016  00031E  5C0D               	subwf	___aldiv@dividend,w,c
  1017  000320  5012               	movf	___aldiv@divisor+1,w,c
  1018  000322  580E               	subwfb	___aldiv@dividend+1,w,c
  1019  000324  5013               	movf	___aldiv@divisor+2,w,c
  1020  000326  580F               	subwfb	___aldiv@dividend+2,w,c
  1021  000328  5014               	movf	___aldiv@divisor+3,w,c
  1022  00032A  5810               	subwfb	___aldiv@dividend+3,w,c
  1023  00032C  A0D8               	btfss	status,0,c
  1024  00032E  D009               	goto	i2l811
  1025  000330  5011               	movf	___aldiv@divisor,w,c
  1026  000332  5E0D               	subwf	___aldiv@dividend,f,c
  1027  000334  5012               	movf	___aldiv@divisor+1,w,c
  1028  000336  5A0E               	subwfb	___aldiv@dividend+1,f,c
  1029  000338  5013               	movf	___aldiv@divisor+2,w,c
  1030  00033A  5A0F               	subwfb	___aldiv@dividend+2,f,c
  1031  00033C  5014               	movf	___aldiv@divisor+3,w,c
  1032  00033E  5A10               	subwfb	___aldiv@dividend+3,f,c
  1033  000340  8017               	bsf	___aldiv@quotient,0,c
  1034  000342                     i2l811:
  1035  000342  90D8               	bcf	status,0,c
  1036  000344  3214               	rrcf	___aldiv@divisor+3,f,c
  1037  000346  3213               	rrcf	___aldiv@divisor+2,f,c
  1038  000348  3212               	rrcf	___aldiv@divisor+1,f,c
  1039  00034A  3211               	rrcf	___aldiv@divisor,f,c
  1040  00034C  2E15               	decfsz	___aldiv@counter,f,c
  1041  00034E  D7E1               	goto	i2l803
  1042  000350                     i2l815:
  1043  000350  5016               	movf	___aldiv@sign,w,c
  1044  000352  B4D8               	btfsc	status,2,c
  1045  000354  D008               	goto	i2l819
  1046  000356  1E1A               	comf	___aldiv@quotient+3,f,c
  1047  000358  1E19               	comf	___aldiv@quotient+2,f,c
  1048  00035A  1E18               	comf	___aldiv@quotient+1,f,c
  1049  00035C  6C17               	negf	___aldiv@quotient,c
  1050  00035E  0E00               	movlw	0
  1051  000360  2218               	addwfc	___aldiv@quotient+1,f,c
  1052  000362  2219               	addwfc	___aldiv@quotient+2,f,c
  1053  000364  221A               	addwfc	___aldiv@quotient+3,f,c
  1054  000366                     i2l819:
  1055  000366  C017  F00D         	movff	___aldiv@quotient,?___aldiv
  1056  00036A  C018  F00E         	movff	___aldiv@quotient+1,?___aldiv+1
  1057  00036E  C019  F00F         	movff	___aldiv@quotient+2,?___aldiv+2
  1058  000372  C01A  F010         	movff	___aldiv@quotient+3,?___aldiv+3
  1059  000376  0012               	return	
  1060  000378                     __end_of___aldiv:
  1061                           	opt stack 0
  1062  0000                     pclatu	equ	0xFFB
  1063                           pclath	equ	0xFFA
  1064                           tblptru	equ	0xFF8
  1065                           tblptrh	equ	0xFF7
  1066                           tblptrl	equ	0xFF6
  1067                           tablat	equ	0xFF5
  1068                           prodh	equ	0xFF4
  1069                           prodl	equ	0xFF3
  1070                           intcon	equ	0xFF2
  1071                           fsr0h	equ	0xFEA
  1072                           fsr0l	equ	0xFE9
  1073                           fsr1h	equ	0xFE2
  1074                           fsr1l	equ	0xFE1
  1075                           fsr2h	equ	0xFDA
  1076                           fsr2l	equ	0xFD9
  1077                           status	equ	0xFD8
  1078                           pclatu	equ	0xFFB
  1079                           pclath	equ	0xFFA
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           prodh	equ	0xFF4
  1085                           prodl	equ	0xFF3
  1086                           intcon	equ	0xFF2
  1087                           fsr0h	equ	0xFEA
  1088                           fsr0l	equ	0xFE9
  1089                           fsr1h	equ	0xFE2
  1090                           fsr1l	equ	0xFE1
  1091                           fsr2h	equ	0xFDA
  1092                           fsr2l	equ	0xFD9
  1093                           status	equ	0xFD8
  1094                           
  1095                           	psect	rparam
  1096  0000                     pclatu	equ	0xFFB
  1097                           pclath	equ	0xFFA
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           tblptrl	equ	0xFF6
  1101                           tablat	equ	0xFF5
  1102                           prodh	equ	0xFF4
  1103                           prodl	equ	0xFF3
  1104                           intcon	equ	0xFF2
  1105                           fsr0h	equ	0xFEA
  1106                           fsr0l	equ	0xFE9
  1107                           fsr1h	equ	0xFE2
  1108                           fsr1l	equ	0xFE1
  1109                           fsr2h	equ	0xFDA
  1110                           fsr2l	equ	0xFD9
  1111                           status	equ	0xFD8
  1112                           
  1113                           	psect	temp
  1114  000044                     btemp:
  1115                           	opt stack 0
  1116  000044                     	ds	1
  1117  0000                     int$flags	set	btemp
  1118                           pclatu	equ	0xFFB
  1119                           pclath	equ	0xFFA
  1120                           tblptru	equ	0xFF8
  1121                           tblptrh	equ	0xFF7
  1122                           tblptrl	equ	0xFF6
  1123                           tablat	equ	0xFF5
  1124                           prodh	equ	0xFF4
  1125                           prodl	equ	0xFF3
  1126                           intcon	equ	0xFF2
  1127                           fsr0h	equ	0xFEA
  1128                           fsr0l	equ	0xFE9
  1129                           fsr1h	equ	0xFE2
  1130                           fsr1l	equ	0xFE1
  1131                           fsr2h	equ	0xFDA
  1132                           fsr2l	equ	0xFD9
  1133                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      67
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_setTMR0_ms
    _setTMR0_ms->_setPreScaler
    _setPreScaler->___aldiv
    ___aldiv->___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                              _Setup
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                 14    14      0    2146
                                             52 COMRAM    14    14      0
                         _setTMR0_ms
 ---------------------------------------------------------------------------------
 (3) _setTMR0_ms                                          12     8      4    2146
                                             40 COMRAM    12     8      4
                            ___aldiv
                             ___lmul
                       _setPreScaler
 ---------------------------------------------------------------------------------
 (4) _setPreScaler                                        14    10      4    1107
                                             26 COMRAM    14    10      4
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     324
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             14     6      8     558
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup

 _isr (ROOT)
   _setTMR0_ms
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _setPreScaler
       ___aldiv
         ___lmul (ARG)
       ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     42      43       1       71.3%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      43       9        0.0%
DATA                 0      0      43      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Nov 15 13:22:28 2017

                         _i 0043                          l56 0410                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
                       _GIE 007F97                __CFG_CPB$OFF 000000                __CFG_CPD$OFF 000000  
                       _isr 0008                __CFG_FOSC$XT 000000                __CFG_LVP$OFF 000000  
                      ?_isr 0001                        _LATA 000F89                        _LATC 000F8B  
                      i2l66 006C                        i2l67 0070                        _main 040C  
                      fsr0h 000FEA                        fsr1h 000FE2                        fsr2h 000FDA  
                      fsr0l 000FE9                        fsr1l 000FE1                        fsr2l 000FD9  
                      btemp 0044               __CFG_BORV$190 000000                        prodh 000FF4  
                      prodl 000FF3                        start 00AC               __CFG_IESO$OFF 000000  
   setTMR0_ms@StartingValue 0031                ___param_bank 000000                       ??_isr 0035  
           __end_of___aldiv 0378                       ?_main 0001                       _T0CON 000FD5  
                     i2l801 030E                       i2l811 0342                       i2l803 0312  
                     i2l815 0350                       i2l831 014A                       i2l833 015E  
                     i2l819 0366                       i2l771 0388                       i2l827 011E  
                     i2l837 01B2                       i2l775 039C                       i2l839 01B6  
                     i2l793 02E0                       i2l787 02C8                       i2l799 0302  
                     _TMR0H 000FD7                       _TMR0L 000FD6                       _TRISA 000F92  
                     _TRISC 000F94               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000         ___lmul@multiplicand 0005               __CFG_WRT3$OFF 000000  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000                       _Setup 03CE  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
            __CFG_EBTRB$OFF 000000          __CFG_MCLRE$EXTMCLR 000000              __CFG_BOREN$OFF 000000  
                     pclath 000FFA                       tablat 000FF5                       status 000FD8  
           __initialization 0400                __end_of_main 0412                      ??_main 0000  
             __activetblptr 000000                      ?_Setup 0001                      _ADCON0 000FC2  
         setTMR0_ms@timeval 0029                      _ADCON2 000FC0                      _ADRESH 000FC4  
                    _ANSELA 000F38                      _ANSELC 000F3A                      _GODONE 007E11  
            __CFG_WDTEN$OFF 000000                      _INTCON 000FF2                      _TMR0IE 007F95  
                    _TMR0IF 007F92                      _TMR0ON 007EAF              __CFG_XINST$OFF 000000  
                    ___lmul 0378                   ??___aldiv 0015                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8             __CFG_HFOFST$OFF 000000  
                __accesstop 0060     __end_of__initialization 0402             __CFG_PBADEN$OFF 000000  
             ___rparam_used 000001              __pcstackCOMRAM 0001               __end_of_Setup 0400  
                   ??_Setup 0000             __CFG_PLLCFG$OFF 000000               ?_setPreScaler 001B  
        __CFG_CCP2MX$PORTC1 000000                     ?___lmul 0001          __CFG_CCP3MX$PORTB5 000000  
            ___lmul@product 0009                     i2u24_40 0184                     i2u24_45 017A  
                   i2u25_40 01AC           __CFG_PRICLKEN$OFF 000000             __CFG_PWRTEN$OFF 000000  
            ??_setPreScaler 001F                     __Hparam 0000                     __Lparam 0000  
                   ___aldiv 02AC             __size_of___lmul 0056             __CFG_STVREN$OFF 000000  
                   __pcinit 0400                     __ramtop 0600                     __ptext0 040C  
                   __ptext1 03CE                     __ptext3 01C8                     __ptext4 00B0  
                   __ptext5 0378                     __ptext6 02AC                  _setTMR0_ms 01C8  
              __size_of_isr 00A4            ___aldiv@dividend 000D        end_of_initialization 0402  
          ___aldiv@quotient 0017               setPreScaler@t 001B         setTMR0_ms@PreScaler 002D  
            __end_of___lmul 03CE                 ?_setTMR0_ms 0029         start_initialization 0400  
      __end_of_setPreScaler 01C8                 __end_of_isr 00AC                    ??___lmul 0009  
               __pbssCOMRAM 0043               __pcstackBANK0 0000         __size_of_setTMR0_ms 00E4  
                 __pintcode 0008                    ?___aldiv 000D              __size_of_Setup 0032  
           ___aldiv@divisor 0011             ___aldiv@counter 0015            __CFG_WDTPS$32768 000000  
     __size_of_setPreScaler 0118           ___lmul@multiplier 0001                    __Hrparam 0000  
                  __Lrparam 0000                _setPreScaler 00B0           __CFG_P2BMX$PORTB5 000000  
          __size_of___aldiv 00CC                ??_setTMR0_ms 002D               __size_of_main 0006  
     setPreScaler@PreScaler 0025          __end_of_setTMR0_ms 02AC                    int$flags 0044  
setPreScaler@HighBitCounter 0024                    intlevel2 0000                ___aldiv@sign 0016  
         __CFG_T3CMX$PORTC0 000000  
